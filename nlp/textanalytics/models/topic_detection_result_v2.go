package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// TopicDetectionResultV2 This is object returned for the clustering call
// swagger:model TopicDetectionResultV2
type TopicDetectionResultV2 struct {
	errorsField []*ErrorRecordV2

	// topic assignments
	TopicAssignments []*TopicAssignmentRecordV2 `json:"topicAssignments"`

	// topics
	Topics []*TopicInfoRecordV2 `json:"topics"`
}

func (m *TopicDetectionResultV2) Discriminator() string {
	return "TopicDetectionResultV2"
}
func (m *TopicDetectionResultV2) SetDiscriminator(val string) {

}

func (m *TopicDetectionResultV2) Errors() []*ErrorRecordV2 {
	return m.errorsField
}
func (m *TopicDetectionResultV2) SetErrors(val []*ErrorRecordV2) {
	m.errorsField = val
}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *TopicDetectionResultV2) UnmarshalJSON(raw []byte) error {
	var data struct {
		Discriminator string `json:"discriminator"`

		Errors []*ErrorRecordV2 `json:"errors"`

		// topic assignments
		TopicAssignments []*TopicAssignmentRecordV2 `json:"topicAssignments"`

		// topics
		Topics []*TopicInfoRecordV2 `json:"topics"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.errorsField = data.Errors
	m.TopicAssignments = data.TopicAssignments
	m.Topics = data.Topics

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m TopicDetectionResultV2) MarshalJSON() ([]byte, error) {
	var data struct {
		Discriminator string `json:"discriminator"`

		Errors []*ErrorRecordV2 `json:"errors"`

		// topic assignments
		TopicAssignments []*TopicAssignmentRecordV2 `json:"topicAssignments"`

		// topics
		Topics []*TopicInfoRecordV2 `json:"topics"`
	}

	data.Errors = m.errorsField
	data.TopicAssignments = m.TopicAssignments
	data.Topics = m.Topics
	data.Discriminator = "TopicDetectionResultV2"
	return json.Marshal(data)
}

// Validate validates this topic detection result v2
func (m *TopicDetectionResultV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopicDetectionResultV2) validateErrors(formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors()); i++ {

		if swag.IsZero(m.errorsField[i]) { // not required
			continue
		}

		if m.errorsField[i] != nil {

			if err := m.errorsField[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TopicDetectionResultV2) validateTopicAssignments(formats strfmt.Registry) error {

	for i := 0; i < len(m.TopicAssignments); i++ {

		if swag.IsZero(m.TopicAssignments[i]) { // not required
			continue
		}

		if m.TopicAssignments[i] != nil {

			if err := m.TopicAssignments[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TopicDetectionResultV2) validateTopics(formats strfmt.Registry) error {

	for i := 0; i < len(m.Topics); i++ {

		if swag.IsZero(m.Topics[i]) { // not required
			continue
		}

		if m.Topics[i] != nil {

			if err := m.Topics[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
