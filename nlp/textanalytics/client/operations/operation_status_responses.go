package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/docker/ddc-opencontrol/nlp/textanalytics/models"
)

// OperationStatusReader is a Reader for the OperationStatus structure.
type OperationStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OperationStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOperationStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewOperationStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOperationStatusOK creates a OperationStatusOK with default headers values
func NewOperationStatusOK() *OperationStatusOK {
	return &OperationStatusOK{}
}

/*OperationStatusOK handles this case with default header values.

OK
*/
type OperationStatusOK struct {
	Payload *models.OperationResult
}

func (o *OperationStatusOK) Error() string {
	return fmt.Sprintf("[GET /operations/{operationId}][%d] operationStatusOK  %+v", 200, o.Payload)
}

func (o *OperationStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OperationResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperationStatusBadRequest creates a OperationStatusBadRequest with default headers values
func NewOperationStatusBadRequest() *OperationStatusBadRequest {
	return &OperationStatusBadRequest{}
}

/*OperationStatusBadRequest handles this case with default header values.

BadRequest
*/
type OperationStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *OperationStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /operations/{operationId}][%d] operationStatusBadRequest  %+v", 400, o.Payload)
}

func (o *OperationStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
