package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/docker/compliance/nlp/textanalytics/models"
)

// DetectLanguageReader is a Reader for the DetectLanguage structure.
type DetectLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetectLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDetectLanguageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDetectLanguageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDetectLanguageOK creates a DetectLanguageOK with default headers values
func NewDetectLanguageOK() *DetectLanguageOK {
	return &DetectLanguageOK{}
}

/*DetectLanguageOK handles this case with default header values.

OK
*/
type DetectLanguageOK struct {
	Payload *models.LanguageBatchResultV2
}

func (o *DetectLanguageOK) Error() string {
	return fmt.Sprintf("[POST /languages][%d] detectLanguageOK  %+v", 200, o.Payload)
}

func (o *DetectLanguageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LanguageBatchResultV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectLanguageBadRequest creates a DetectLanguageBadRequest with default headers values
func NewDetectLanguageBadRequest() *DetectLanguageBadRequest {
	return &DetectLanguageBadRequest{}
}

/*DetectLanguageBadRequest handles this case with default header values.

BadRequest
*/
type DetectLanguageBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DetectLanguageBadRequest) Error() string {
	return fmt.Sprintf("[POST /languages][%d] detectLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *DetectLanguageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
