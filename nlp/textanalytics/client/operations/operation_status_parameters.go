package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOperationStatusParams creates a new OperationStatusParams object
// with the default values initialized.
func NewOperationStatusParams() *OperationStatusParams {
	var ()
	return &OperationStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOperationStatusParamsWithTimeout creates a new OperationStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOperationStatusParamsWithTimeout(timeout time.Duration) *OperationStatusParams {
	var ()
	return &OperationStatusParams{

		timeout: timeout,
	}
}

// NewOperationStatusParamsWithContext creates a new OperationStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewOperationStatusParamsWithContext(ctx context.Context) *OperationStatusParams {
	var ()
	return &OperationStatusParams{

		Context: ctx,
	}
}

/*OperationStatusParams contains all the parameters to send to the API endpoint
for the operation status operation typically these are written to a http.Request
*/
type OperationStatusParams struct {

	/*OcpApimSubscriptionKey
	  subscription key in header

	*/
	OcpApimSubscriptionKey *string
	/*OperationID
	  A unique id for the submitted operation.

	*/
	OperationID string
	/*SubscriptionKey
	  subscription key in url

	*/
	SubscriptionKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the operation status params
func (o *OperationStatusParams) WithTimeout(timeout time.Duration) *OperationStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the operation status params
func (o *OperationStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the operation status params
func (o *OperationStatusParams) WithContext(ctx context.Context) *OperationStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the operation status params
func (o *OperationStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the operation status params
func (o *OperationStatusParams) WithOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) *OperationStatusParams {
	o.SetOcpApimSubscriptionKey(ocpApimSubscriptionKey)
	return o
}

// SetOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the operation status params
func (o *OperationStatusParams) SetOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) {
	o.OcpApimSubscriptionKey = ocpApimSubscriptionKey
}

// WithOperationID adds the operationID to the operation status params
func (o *OperationStatusParams) WithOperationID(operationID string) *OperationStatusParams {
	o.SetOperationID(operationID)
	return o
}

// SetOperationID adds the operationId to the operation status params
func (o *OperationStatusParams) SetOperationID(operationID string) {
	o.OperationID = operationID
}

// WithSubscriptionKey adds the subscriptionKey to the operation status params
func (o *OperationStatusParams) WithSubscriptionKey(subscriptionKey *string) *OperationStatusParams {
	o.SetSubscriptionKey(subscriptionKey)
	return o
}

// SetSubscriptionKey adds the subscriptionKey to the operation status params
func (o *OperationStatusParams) SetSubscriptionKey(subscriptionKey *string) {
	o.SubscriptionKey = subscriptionKey
}

// WriteToRequest writes these params to a swagger request
func (o *OperationStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OcpApimSubscriptionKey != nil {

		// header param Ocp-Apim-Subscription-Key
		if err := r.SetHeaderParam("Ocp-Apim-Subscription-Key", *o.OcpApimSubscriptionKey); err != nil {
			return err
		}

	}

	// path param operationId
	if err := r.SetPathParam("operationId", o.OperationID); err != nil {
		return err
	}

	if o.SubscriptionKey != nil {

		// query param subscription-key
		var qrSubscriptionKey string
		if o.SubscriptionKey != nil {
			qrSubscriptionKey = *o.SubscriptionKey
		}
		qSubscriptionKey := qrSubscriptionKey
		if qSubscriptionKey != "" {
			if err := r.SetQueryParam("subscription-key", qSubscriptionKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
