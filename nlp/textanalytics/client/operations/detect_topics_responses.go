package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/docker/ddc-opencontrol/nlp/textanalytics/models"
)

// DetectTopicsReader is a Reader for the DetectTopics structure.
type DetectTopicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetectTopicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewDetectTopicsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDetectTopicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDetectTopicsAccepted creates a DetectTopicsAccepted with default headers values
func NewDetectTopicsAccepted() *DetectTopicsAccepted {
	return &DetectTopicsAccepted{}
}

/*DetectTopicsAccepted handles this case with default header values.

Accepted
*/
type DetectTopicsAccepted struct {
	/*URL of the created operation. Invoke a GET HTTP request to retrieve the operation status.
	 */
	OperationLocation string
}

func (o *DetectTopicsAccepted) Error() string {
	return fmt.Sprintf("[POST /topics][%d] detectTopicsAccepted ", 202)
}

func (o *DetectTopicsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Operation-Location
	o.OperationLocation = response.GetHeader("Operation-Location")

	return nil
}

// NewDetectTopicsBadRequest creates a DetectTopicsBadRequest with default headers values
func NewDetectTopicsBadRequest() *DetectTopicsBadRequest {
	return &DetectTopicsBadRequest{}
}

/*DetectTopicsBadRequest handles this case with default header values.

BadRequest
*/
type DetectTopicsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DetectTopicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /topics][%d] detectTopicsBadRequest  %+v", 400, o.Payload)
}

func (o *DetectTopicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
