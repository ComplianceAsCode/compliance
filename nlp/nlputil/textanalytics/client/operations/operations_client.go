package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DetectLanguage The API returns the detected language and a numeric score between 0 and 1.
            Scores close to 1 indicate 100% certainty that the identified language is true.
            A total of 120 languages are supported.
*/
func (a *Client) DetectLanguage(params *DetectLanguageParams) (*DetectLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetectLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Detect Language",
		Method:             "POST",
		PathPattern:        "/languages",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetectLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetectLanguageOK), nil

}

/*
DetectTopics The API returns the top detected topics for a list of submitted text documents.
            A topic is identified with a key phrase, which can be one or more related words.
            Use the URL parameters and stop word list to control which words or documents are filtered out.
            You can also supply a list of topics to exclude from the response.
            At least 100 text documents must be submitted, however it is designed to detect topics across hundreds to thousands of documents.
            Note that one transaction is charged per text document submitted.
            For best performance, limit each document to a short, human written text paragraph such as review, conversation or user feedback.
*/
func (a *Client) DetectTopics(params *DetectTopicsParams) (*DetectTopicsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetectTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Detect Topics",
		Method:             "POST",
		PathPattern:        "/topics",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetectTopicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetectTopicsAccepted), nil

}

/*
KeyPhrases The API returns a list of strings denoting the key talking points in the input text.
            We employ techniques from Microsoft Office's sophisticated Natural Language Processing toolkit.
            Currently, the following languages are supported: English, German, Spanish and Japanese.
*/
func (a *Client) KeyPhrases(params *KeyPhrasesParams) (*KeyPhrasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyPhrasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Key Phrases",
		Method:             "POST",
		PathPattern:        "/keyPhrases",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyPhrasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyPhrasesOK), nil

}

/*
OperationStatus Get the status of an operation submitted for processing. If the the operation has reached a 'Succeeded' state, will also return the result.
*/
func (a *Client) OperationStatus(params *OperationStatusParams) (*OperationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operation Status",
		Method:             "GET",
		PathPattern:        "/operations/{operationId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationStatusOK), nil

}

/*
Sentiment The API returns a numeric score between 0 and 1.
            Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.
            Sentiment score is generated using classification techniques.
            The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.
            Currently, the following languages are supported: English, Spanish, French, Portuguese.
*/
func (a *Client) Sentiment(params *SentimentParams) (*SentimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSentimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sentiment",
		Method:             "POST",
		PathPattern:        "/sentiment",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SentimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SentimentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
