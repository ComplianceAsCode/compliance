package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/docker/compliance/nlptooling/nlputil/textanalytics/models"
)

// NewKeyPhrasesParams creates a new KeyPhrasesParams object
// with the default values initialized.
func NewKeyPhrasesParams() *KeyPhrasesParams {
	var ()
	return &KeyPhrasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewKeyPhrasesParamsWithTimeout creates a new KeyPhrasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewKeyPhrasesParamsWithTimeout(timeout time.Duration) *KeyPhrasesParams {
	var ()
	return &KeyPhrasesParams{

		timeout: timeout,
	}
}

// NewKeyPhrasesParamsWithContext creates a new KeyPhrasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewKeyPhrasesParamsWithContext(ctx context.Context) *KeyPhrasesParams {
	var ()
	return &KeyPhrasesParams{

		Context: ctx,
	}
}

/*KeyPhrasesParams contains all the parameters to send to the API endpoint
for the key phrases operation typically these are written to a http.Request
*/
type KeyPhrasesParams struct {

	/*OcpApimSubscriptionKey
	  subscription key in header

	*/
	OcpApimSubscriptionKey *string
	/*MultiLanguageBatchInputV2*/
	MultiLanguageBatchInputV2 *models.MultiLanguageBatchInputV2
	/*SubscriptionKey
	  subscription key in url

	*/
	SubscriptionKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the key phrases params
func (o *KeyPhrasesParams) WithTimeout(timeout time.Duration) *KeyPhrasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the key phrases params
func (o *KeyPhrasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the key phrases params
func (o *KeyPhrasesParams) WithContext(ctx context.Context) *KeyPhrasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the key phrases params
func (o *KeyPhrasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the key phrases params
func (o *KeyPhrasesParams) WithOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) *KeyPhrasesParams {
	o.SetOcpApimSubscriptionKey(ocpApimSubscriptionKey)
	return o
}

// SetOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the key phrases params
func (o *KeyPhrasesParams) SetOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) {
	o.OcpApimSubscriptionKey = ocpApimSubscriptionKey
}

// WithMultiLanguageBatchInputV2 adds the multiLanguageBatchInputV2 to the key phrases params
func (o *KeyPhrasesParams) WithMultiLanguageBatchInputV2(multiLanguageBatchInputV2 *models.MultiLanguageBatchInputV2) *KeyPhrasesParams {
	o.SetMultiLanguageBatchInputV2(multiLanguageBatchInputV2)
	return o
}

// SetMultiLanguageBatchInputV2 adds the multiLanguageBatchInputV2 to the key phrases params
func (o *KeyPhrasesParams) SetMultiLanguageBatchInputV2(multiLanguageBatchInputV2 *models.MultiLanguageBatchInputV2) {
	o.MultiLanguageBatchInputV2 = multiLanguageBatchInputV2
}

// WithSubscriptionKey adds the subscriptionKey to the key phrases params
func (o *KeyPhrasesParams) WithSubscriptionKey(subscriptionKey *string) *KeyPhrasesParams {
	o.SetSubscriptionKey(subscriptionKey)
	return o
}

// SetSubscriptionKey adds the subscriptionKey to the key phrases params
func (o *KeyPhrasesParams) SetSubscriptionKey(subscriptionKey *string) {
	o.SubscriptionKey = subscriptionKey
}

// WriteToRequest writes these params to a swagger request
func (o *KeyPhrasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OcpApimSubscriptionKey != nil {

		// header param Ocp-Apim-Subscription-Key
		if err := r.SetHeaderParam("Ocp-Apim-Subscription-Key", *o.OcpApimSubscriptionKey); err != nil {
			return err
		}

	}

	if o.MultiLanguageBatchInputV2 == nil {
		o.MultiLanguageBatchInputV2 = new(models.MultiLanguageBatchInputV2)
	}

	if err := r.SetBodyParam(o.MultiLanguageBatchInputV2); err != nil {
		return err
	}

	if o.SubscriptionKey != nil {

		// query param subscription-key
		var qrSubscriptionKey string
		if o.SubscriptionKey != nil {
			qrSubscriptionKey = *o.SubscriptionKey
		}
		qSubscriptionKey := qrSubscriptionKey
		if qSubscriptionKey != "" {
			if err := r.SetQueryParam("subscription-key", qSubscriptionKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
