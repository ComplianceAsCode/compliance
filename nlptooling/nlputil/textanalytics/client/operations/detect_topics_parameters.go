package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/docker/compliance/nlptooling/nlputil/textanalytics/models"
)

// NewDetectTopicsParams creates a new DetectTopicsParams object
// with the default values initialized.
func NewDetectTopicsParams() *DetectTopicsParams {
	var ()
	return &DetectTopicsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDetectTopicsParamsWithTimeout creates a new DetectTopicsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDetectTopicsParamsWithTimeout(timeout time.Duration) *DetectTopicsParams {
	var ()
	return &DetectTopicsParams{

		timeout: timeout,
	}
}

// NewDetectTopicsParamsWithContext creates a new DetectTopicsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDetectTopicsParamsWithContext(ctx context.Context) *DetectTopicsParams {
	var ()
	return &DetectTopicsParams{

		Context: ctx,
	}
}

/*DetectTopicsParams contains all the parameters to send to the API endpoint
for the detect topics operation typically these are written to a http.Request
*/
type DetectTopicsParams struct {

	/*OcpApimSubscriptionKey
	  subscription key in header

	*/
	OcpApimSubscriptionKey *string
	/*MaxDocumentsPerWord
	  Format - int32. (optional) Words that occur in more than this many documents are ignored.
	            Use this parameter to help exclude ubiquitous document topics.
	            Omit to let the service choose appropriate value.

	*/
	MaxDocumentsPerWord *int64
	/*MinDocumentsPerWord
	  Format - int32. (optional) Words that occur in less than this many documents are ignored.
	            Use this parameter to help exclude rare document topics.
	            Omit to let the service choose appropriate value.

	*/
	MinDocumentsPerWord *int64
	/*SubscriptionKey
	  subscription key in url

	*/
	SubscriptionKey *string
	/*TopicDetectionInputV2*/
	TopicDetectionInputV2 *models.TopicDetectionInputV2

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the detect topics params
func (o *DetectTopicsParams) WithTimeout(timeout time.Duration) *DetectTopicsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the detect topics params
func (o *DetectTopicsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the detect topics params
func (o *DetectTopicsParams) WithContext(ctx context.Context) *DetectTopicsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the detect topics params
func (o *DetectTopicsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the detect topics params
func (o *DetectTopicsParams) WithOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) *DetectTopicsParams {
	o.SetOcpApimSubscriptionKey(ocpApimSubscriptionKey)
	return o
}

// SetOcpApimSubscriptionKey adds the ocpApimSubscriptionKey to the detect topics params
func (o *DetectTopicsParams) SetOcpApimSubscriptionKey(ocpApimSubscriptionKey *string) {
	o.OcpApimSubscriptionKey = ocpApimSubscriptionKey
}

// WithMaxDocumentsPerWord adds the maxDocumentsPerWord to the detect topics params
func (o *DetectTopicsParams) WithMaxDocumentsPerWord(maxDocumentsPerWord *int64) *DetectTopicsParams {
	o.SetMaxDocumentsPerWord(maxDocumentsPerWord)
	return o
}

// SetMaxDocumentsPerWord adds the maxDocumentsPerWord to the detect topics params
func (o *DetectTopicsParams) SetMaxDocumentsPerWord(maxDocumentsPerWord *int64) {
	o.MaxDocumentsPerWord = maxDocumentsPerWord
}

// WithMinDocumentsPerWord adds the minDocumentsPerWord to the detect topics params
func (o *DetectTopicsParams) WithMinDocumentsPerWord(minDocumentsPerWord *int64) *DetectTopicsParams {
	o.SetMinDocumentsPerWord(minDocumentsPerWord)
	return o
}

// SetMinDocumentsPerWord adds the minDocumentsPerWord to the detect topics params
func (o *DetectTopicsParams) SetMinDocumentsPerWord(minDocumentsPerWord *int64) {
	o.MinDocumentsPerWord = minDocumentsPerWord
}

// WithSubscriptionKey adds the subscriptionKey to the detect topics params
func (o *DetectTopicsParams) WithSubscriptionKey(subscriptionKey *string) *DetectTopicsParams {
	o.SetSubscriptionKey(subscriptionKey)
	return o
}

// SetSubscriptionKey adds the subscriptionKey to the detect topics params
func (o *DetectTopicsParams) SetSubscriptionKey(subscriptionKey *string) {
	o.SubscriptionKey = subscriptionKey
}

// WithTopicDetectionInputV2 adds the topicDetectionInputV2 to the detect topics params
func (o *DetectTopicsParams) WithTopicDetectionInputV2(topicDetectionInputV2 *models.TopicDetectionInputV2) *DetectTopicsParams {
	o.SetTopicDetectionInputV2(topicDetectionInputV2)
	return o
}

// SetTopicDetectionInputV2 adds the topicDetectionInputV2 to the detect topics params
func (o *DetectTopicsParams) SetTopicDetectionInputV2(topicDetectionInputV2 *models.TopicDetectionInputV2) {
	o.TopicDetectionInputV2 = topicDetectionInputV2
}

// WriteToRequest writes these params to a swagger request
func (o *DetectTopicsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OcpApimSubscriptionKey != nil {

		// header param Ocp-Apim-Subscription-Key
		if err := r.SetHeaderParam("Ocp-Apim-Subscription-Key", *o.OcpApimSubscriptionKey); err != nil {
			return err
		}

	}

	if o.MaxDocumentsPerWord != nil {

		// query param maxDocumentsPerWord
		var qrMaxDocumentsPerWord int64
		if o.MaxDocumentsPerWord != nil {
			qrMaxDocumentsPerWord = *o.MaxDocumentsPerWord
		}
		qMaxDocumentsPerWord := swag.FormatInt64(qrMaxDocumentsPerWord)
		if qMaxDocumentsPerWord != "" {
			if err := r.SetQueryParam("maxDocumentsPerWord", qMaxDocumentsPerWord); err != nil {
				return err
			}
		}

	}

	if o.MinDocumentsPerWord != nil {

		// query param minDocumentsPerWord
		var qrMinDocumentsPerWord int64
		if o.MinDocumentsPerWord != nil {
			qrMinDocumentsPerWord = *o.MinDocumentsPerWord
		}
		qMinDocumentsPerWord := swag.FormatInt64(qrMinDocumentsPerWord)
		if qMinDocumentsPerWord != "" {
			if err := r.SetQueryParam("minDocumentsPerWord", qMinDocumentsPerWord); err != nil {
				return err
			}
		}

	}

	if o.SubscriptionKey != nil {

		// query param subscription-key
		var qrSubscriptionKey string
		if o.SubscriptionKey != nil {
			qrSubscriptionKey = *o.SubscriptionKey
		}
		qSubscriptionKey := qrSubscriptionKey
		if qSubscriptionKey != "" {
			if err := r.SetQueryParam("subscription-key", qSubscriptionKey); err != nil {
				return err
			}
		}

	}

	if o.TopicDetectionInputV2 == nil {
		o.TopicDetectionInputV2 = new(models.TopicDetectionInputV2)
	}

	if err := r.SetBodyParam(o.TopicDetectionInputV2); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
