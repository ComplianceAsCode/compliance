package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// OperationResult operation result
// swagger:model OperationResult
type OperationResult struct {

	// Operation creation date time (ISO 8601 literal).
	CreatedDateTime strfmt.DateTime `json:"createdDateTime,omitempty"`

	// Operation last status change date time (ISO 8601 literal).
	LastActionDateTime strfmt.DateTime `json:"lastActionDateTime,omitempty"`

	// Error message. Exists only in case the operation has reached a 'Failed' state.
	Message string `json:"message,omitempty"`

	OperationProcessingResult OperationProcessingResult `json:"-"`

	// Name of API endpoint that created the operation.
	OperationType string `json:"operationType,omitempty"`

	// Operation status.
	Status string `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OperationResult) UnmarshalJSON(raw []byte) error {
	var data struct {
		CreatedDateTime strfmt.DateTime `json:"createdDateTime,omitempty"`

		LastActionDateTime strfmt.DateTime `json:"lastActionDateTime,omitempty"`

		Message string `json:"message,omitempty"`

		OperationProcessingResult json.RawMessage `json:"operationProcessingResult,omitempty"`

		OperationType string `json:"operationType,omitempty"`

		Status string `json:"status,omitempty"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	operationProcessingResult, err := UnmarshalOperationProcessingResult(bytes.NewBuffer(data.OperationProcessingResult), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result OperationResult
	result.CreatedDateTime = data.CreatedDateTime
	result.LastActionDateTime = data.LastActionDateTime
	result.Message = data.Message
	result.OperationProcessingResult = operationProcessingResult
	result.OperationType = data.OperationType
	result.Status = data.Status
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OperationResult) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		CreatedDateTime strfmt.DateTime `json:"createdDateTime,omitempty"`

		LastActionDateTime strfmt.DateTime `json:"lastActionDateTime,omitempty"`

		Message string `json:"message,omitempty"`

		OperationType string `json:"operationType,omitempty"`

		Status string `json:"status,omitempty"`
	}{
		CreatedDateTime:    m.CreatedDateTime,
		LastActionDateTime: m.LastActionDateTime,
		Message:            m.Message,
		OperationType:      m.OperationType,
		Status:             m.Status,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		OperationProcessingResult OperationProcessingResult `json:"operationProcessingResult,omitempty"`
	}{
		OperationProcessingResult: m.OperationProcessingResult,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}

// Validate validates this operation result
func (m *OperationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var operationResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notStarted","running","failed","cancelled","succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationResultTypeStatusPropEnum = append(operationResultTypeStatusPropEnum, v)
	}
}

const (
	// OperationResultStatusNotStarted captures enum value "notStarted"
	OperationResultStatusNotStarted string = "notStarted"
	// OperationResultStatusRunning captures enum value "running"
	OperationResultStatusRunning string = "running"
	// OperationResultStatusFailed captures enum value "failed"
	OperationResultStatusFailed string = "failed"
	// OperationResultStatusCancelled captures enum value "cancelled"
	OperationResultStatusCancelled string = "cancelled"
	// OperationResultStatusSucceeded captures enum value "succeeded"
	OperationResultStatusSucceeded string = "succeeded"
)

// prop value enum
func (m *OperationResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, operationResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OperationResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
