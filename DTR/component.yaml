documentation_complete: false
schema_version: 3.0.0
name: Docker Trusted Registry
references:
  - name: Docker Trusted Registry Documentation
    path: https://docs.docker.com/docker-trusted-registry/
    type: URL
satisfies:
  - control_key: AC-1
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          You can control which users and teams can create and manipulate resources in Docker Trusted Registry. By default, no one can make changes to the cluster. Permissions can be granted and managed to enforce fine-grained access control. Authentication and authorization documentation for the management of users and teams can be found at https://docs.docker.com/docker-trusted-registry/user-management/. The various levels of permissions provided by Docker Trusted Registry can be found at https://docs.docker.com/docker-trusted-registry/user-management/permission-levels/.
    standard_key: NIST-800-53
  
  - control_key: AC-2 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry is made up of multiple backend services that provide for centralized identity. Descriptions of each of those services can be found at https://docs.docker.com/docker-trusted-registry/architecture/. Documentation for managing users, organizations and teams in Docker Trusted Registry can be found at https://docs.docker.com/docker-trusted-registry/user-management/, https://docs.docker.com/docker-trusted-registry/user-management/create-and-manage-orgs/ and https://docs.docker.com/docker-trusted-registry/user-management/create-and-manage-teams/ respectively."
    standard_key: NIST-800-53
  
  - control_key: AC-2 (2)
    covered_by: []
    implementation_statuses:
      - none
    control_origins:
      - configured by customer
    narrative:
      - text: "Both Docker Trusted Registry and Universal Control Plane share the same authentication service. This service does not have the ability to automatically remove or disable accounts after a set period of time. However, using Docker Datacenter's centralized LDAP integration capabilities, one can disable user objects in a connected directory service (such as Active Directory). Documentation for configuring LDAP integration can be found at https://docs.docker.com/ucp/configuration/ldap-integration/."
    standard_key: NIST-800-53

  - control_key: AC-2 (3)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "Both Universal Control Plane and Docker Trusted Registry share the same authentication service. This service does not have the ability to automatically remove or disable inactive accounts after a set period of time. However, using Docker Datacenter's LDAP integration capabilities, one can disable user objects in a connected directory service (such as Active Directory). Documentation for configuring LDAP integration can be found at https://docs.docker.com/ucp/configuration/ldap-integration/."
    standard_key: NIST-800-53
  
  - control_key: AC-2 (4)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "Docker Datacenter logs various authentication and authorization events to standard log files. In addition, Docker Trusted Registry can be monitored by following the documentation at https://docs.docker.com/docker-trusted-registry/monitor-troubleshoot/. Automatic notification of specific account management events is not a capability of Docker Datacenter. However, one can configure Universal Control Plane to direct these event logs to a remote logging service such as an Elasticsearch, Logstash and Kibana (ELK) stack and subsequently alert on specific event types. Instructions for configuring this for Universal Control Plane can be found at https://docs.docker.com/ucp/configuration/configure-logs/. Since Docker Trusted Registry user account management shares the same backend service as Universal Control Plane, the previously linked documentation also applies."
    standard_key: NIST-800-53

  - control_key: AC-2 (5)
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry does allow for the configuration of user session timeouts. This capability is planned for a future release of the product."
    standard_key: NIST-800-53

  - control_key: AC-2 (7)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: "Permission levels for users and teams can be configured in Docker Trusted Registry at https://docs.docker.com/docker-trusted-registry/user-management/permission-levels/."
    standard_key: NIST-800-53

  - control_key: AC-2 (9)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry does not allow for authentication of group objects. However, teams and/or groups synchronized via LDAP can be configured to meet this requirement as necessary."
    standard_key: NIST-800-53

  - control_key: AC-2 (10)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry does not allow for authentication of group objects. However, teams and/or groups synchronized via LDAP can be configured at the directory service to meet this requirement as necessary."
    standard_key: NIST-800-53

  - control_key: AC-2 (12)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry can be monitored by following the documentation at https://docs.docker.com/docker-trusted-registry/monitor-troubleshoot/. Docker Trusted Registry can be configured to send system account log data to a remote logging service such as an Elasticsearch, Logstash and Kibana (ELK) stack. Instructions for configuring this for Universal Control Plane can be found at https://docs.docker.com/ucp/configuration/configure-logs/. Since Docker Trusted Registry system account management shares the same backend service as Universal Control Plane, the previously linked documentation also applies."
    standard_key: NIST-800-53

  - control_key: AC-3
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "Docker Trusted Registry can be configured to control which users and/or teams have access to specific system resources. Documentation for this can be found at https://docs.docker.com/docker-trusted-registry/user-management/. In addition, the various permission levels that can be assigned are documented at https://docs.docker.com/docker-trusted-registry/user-management/permission-levels/."
    standard_key: NIST-800-53

  - control_key: AC-4
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "The Docker Trusted Registry system architecture can be found at https://docs.docker.com/docker-trusted-registry/architecture/. Information specific to container networking within DTR can be found at https://docs.docker.com/docker-trusted-registry/architecture/#networks. The ports used by DTR for communication are documented at https://docs.docker.com/docker-trusted-registry/install/system-requirements/#/ports-used."
    standard_key: NIST-800-53
  
  - control_key: AC-4 (21)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "The Docker Trusted Registry system architecture that can be referenced for identifying logical and physical information flows in the system can be found at https://docs.docker.com/docker-trusted-registry/architecture/. Information specific to container networking within DTR can be found at https://docs.docker.com/docker-trusted-registry/architecture/#networks. The ports used by DTR for communication are documented at https://docs.docker.com/docker-trusted-registry/install/system-requirements/#/ports-used."
    standard_key: NIST-800-53
  
  - control_key: AC-6 (9)
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - text: "The ability to audit the execution of privileged functions in Docker Trusted Registry is planned for a future release of the product"
    standard_key: NIST-800-53
  
  - control_key: AC-6 (10)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - configured by customer
    narrative:
      - text: "Non-privileged users in Docker Trusted Registry can be configured by assigning the appropriate permission levels to those users. When you create a new user in Universal Control Plane, that user becomes available in Docker Trusted Registry and vice versa. When you create an administrator user in Docker Trusted Registry, that user is an administrator in Universal Control Plane. Instructions for doing so can be found at https://docs.docker.com/datacenter/dtr/2.0/user-management/permission-levels/. "
    standard_key: NIST-800-53

  - control_key: AC-7
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: "The enforcement of a limit to the number of conesecutive invalid logon attempts by a user during a specified time period is not currently a feature of Docker Trusted Registry but is planned for a future release."
      - key: b
        text: "The ability to automatically lock/disable an account for a specified period of time after a consecutive invalid logon attempt limit is reached is not currently a feature of Docker Trusted Registry but is planned for a future release."
    standard_key: NIST-800-53

  - control_key: AC-8
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: "The ability to display a system use notification banner to users during the login process is not currently a feature of Docker Trusted Registry but is planned for a future release."
    standard_key: NIST-800-53

  - control_key: AC-10
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: "The ability to limit the number of concurrent sessions for each account/account type is not currently a feature of Docker Trusted Registry but is planned for a future release."
    standard_key: NIST-800-53

  - control_key: AC-11
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: "Per the narrative in AC-2 (5), when support for user session timeouts is introduced in to Docker Trusted Registry, this control will become implemented."
      - key: b
        text: "Per the narrative in AC-2 (5), when support for user session timeouts is introduced in to Docker Trusted Registry, this control will become implemented."
    standard_key: NIST-800-53

  - control_key: AC-11 (1)
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - text: "Per the narrative in AC-2 (5), when support for user session timeouts is introduced in to Docker Trusted Registry, this control will become implemented."
    standard_key: NIST-800-53

  - control_key: AC-12
    covered_by: []
    implementation_statuses:
      - planned
    control_origins:
      - service provider system specific
    narrative:
      - text: "Per the narrative in AC-2 (5), when support for configurable user session timeouts is introduced in to Docker Trusted Registry, this control will become implemented."
    standard_key: NIST-800-53

  - control_key: AC-17 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - configured by customer
    narrative:
      - text: "Docker Trusted Registry logs and controls all local and remote access events. In addition, auditing can be configured on the underlying operating system to meet this control."

  - control_key: AC-17 (2)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "All remote access sessions to Docker Trusted Registry are protected with Transport Layer Security (TLS) 1.2. This is included at both the HTTPS application layer for access to the DTR user interface and for command-line based connections to the registry. In addition to this, all communication to DTR is enforced by way of two-way mutual TLS authentication."
  
  - control_key: AC-17 (3)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: "A combination of managed load balancers, firewalls and access control lists, and virtual networking resources can be used to ensure traffic destined for Docker Trusted Registry is routed through managed network access control points."

  - control_key: AC-17 (9)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - configured by customer
    narrative:
      - text: "Built-in firewall technology in Docker Trusted Registry's underlying operating system can be used to force the disconnection of remote connections to the host. In addition, UCP slave nodes running Docker Trusted Registry replicas can be paused or drained, which subsequently stops sessions to the DTR replica."

  - control_key: AU-2
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          All of the event types indicated by this control are logged by a combination of the backend ucp-controller service within Universal Control Plane and the backend services that make up Docker Trusted Registry. Instructions for viewing this data can be found at https://docs.docker.com/datacenter/dtr/2.0/monitor-troubleshoot/.
    standard_key: NIST-800-53

  - control_key: AU-3
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'Universal Control Plane generates all of the audit record information indicated by this control. A sample audit event has been provided below:

          {"level":"info","license_key":"123456789123456789123456789","msg":"eNZi:Password based auth suceeded","remote_addr":"192.168.33.1:55905","time":"2016-11-09T22:41:01Z","type":"auth ok","username":"dockeruser"}'
    standard_key: NIST-800-53
  
  - control_key: AU-3 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Universal Control Plane can be configured to log data to a remote logging stack, which in turn, sends the Docker Trusted Registry backend container audit records to the remote logging stack. Instructions for doing so can be found at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. The logging stack can subsequently be used to interpolate the information defined by this control from the logged audit records.
    standard_key: NIST-800-53

  - control_key: AU-5
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Universal Control Plane can be configured to log data to a remote logging stack, which in turn, sends the Docker Trusted Registry backend container audit records to the remote logging stack. Instructions for doing so can be found at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. The logging stack can subsequently be configured to alert individuals in the event of log processing failures.
    standard_key: NIST-800-53

  - control_key: AU-7
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          Universal Control Plane can be configured to log data to a remote logging stack, which in turn, sends the Docker Trusted Registry backend container audit records to the remote logging stack. Instructions for doing so can be found at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. The logging stack can subsequently be used to facilitate the audit reduction and report generation requirements of this control.
      - key: b
        text: |
          The underlying operating system chosen to support Docker Trusted Registry should be certified to ensure that logs are not altered during generation and transmission to a remote logging stack.
    standard_key: NIST-800-53
  
  - control_key: AU-7 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Universal Control Plane can be configured to log data to a remote logging stack, which in turn, sends the Docker Trusted Registry backend container audit records to the remote logging stack. Instructions for doing so can be found at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. The logging stack can subsequently be configured to parse information by organization-defined audit fields.
    standard_key: NIST-800-53

  - control_key: AU-8
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - configured by customer
    narrative:
      - key: a
        text: |
          Docker Trusted Registry uses the system clock of the underlying operating system on which it runs. This behavior cannot be modified.
      - key: b
        text: |
          The underlying operating system on which Docker Trusted Registry runs should be configured such that its system clock uses Coordinated Universal Time (UTC) as indicated by this control. Refer to the operating system's instructions for doing so.
    standard_key: NIST-800-53

  - control_key: AU-8 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          The underlying operating system on which Docker Trusted Registry runs should be configured such that its system clock compares itself with an authoritative time source as indicated by this control. This can be accomplished by utilizing the Network Time Protocol (NTP). Refer to the operating system's instructions for doing so.
      - key: b
        text: |
          The underlying operating system on which Docker Trusted Registry runs should be configured such that its system clock synchronizes itself to an authoritative time source as defined by part (a) of this control any time the time difference exceeds that of the organization-defined time period. This can be accomplished by utilizing the Network Time Protocol (NTP). Refer to the operating system's instructions for doing so.
    standard_key: NIST-800-53

  - control_key: AU-9
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          By default, Docker Trusted Registry is configured to use the underlying logging capabilities of CS Docker Engine. As such, on the underlying Linux operating system, only root and sudo users and users that have been added to the 'docker' group have the ability to access the logs generated by UCP backend service containers. In addition, only UCP Administrator users can change the logging endpoint of the system should it be decided that logs be sent to a remote logging stack. In this case, the organization is responsible for configuring the remote logging stack per the provisions of this control.
    standard_key: NIST-800-53

  - control_key: AU-9 (2)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Docker Trusted Registry resides as an Application on a Universal Control Plane cluster, and as such, can be configured to send logs to a remote logging stack per the instructions at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. This logging stack can subsequently be configured to back up audit records per the schedule defined by this control.
    standard_key: NIST-800-53

  - control_key: AU-11
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Docker Trusted Registry resides as an Application on a Universal Control Plane cluster, and as such, can be configured to send logs to a remote logging stack per the instructions at https://docs.docker.com/datacenter/ucp/1.1/configuration/configure-logs/. This logging stack can subsequently be configured retain logs for the duration required by this control.
    standard_key: NIST-800-53

  - control_key: AU-12
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          All of the event types indicated by AU-2 a. are logged by a combination of the backend services within Universal Control Plane and Docker Trusted Registry. Instructions for viewing this data can be found at https://docs.docker.com/datacenter/dtr/2.0/monitor-troubleshoot/.

          The underlying Linux operating system supporting DTR can be configured to audit Docker-specific events with the auditd daemon. Refer to the specific Linux distribution in use for instructions on configuring this service.
      - key: b
        text: |
          Using auditd on the Linux operating system supporting DTR, the organization can configure audit rules to select which Docker-specific events are to be audited. Refer to the specific Linux distribution in use for instructions on configuring this service.
    standard_key: NIST-800-53

  - control_key: CM-5 (3)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          Docker Content Trust is a capability provided by CS Docker Engine that enforces client-side signing and verification of Docker image tags. It provides the ability to use digital signatures for data sent to and received from Docker Trusted Registry and the public Docker Store. These signatures allow client-side verification of the integrity and publisher of specific image tags. All Docker Trusted Registry Docker images are officially signed and verified by Docker, Inc.

          When installing Docker Trusted Registry, you should enable Docker Content Trust (per the instructions at https://docs.docker.com/engine/security/trust/content_trust/) and subsequently pull the the signed DTR image tag.
    standard_key: NIST-800-53

  - control_key: CM-6 (1)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
         The organization can incorporate the use of an external configuration management system to meet the requirements of this control.
    standard_key: NIST-800-53

  - control_key: CM-7 (2)
    covered_by: []
    implementation_statuses:
      - implemented
    control_origins:
      - service provider system specific
    narrative:
      - text: |
         The organization can define a list of allowed base Docker images and make them available via Docker Trusted Registry. The organization must also prevent users from being able to pull Docker images from untrusted sources.
    standard_key: NIST-800-53